security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        ssh_common_user_provider:
            entity:
                class: SSH\MyJwtBundle\Entity\ApiUser
                property: token
    
    role_hierarchy:        
        ROLE_MOBILE:         ROLE_MOBILE 
        ROLE_BACK:           ROLE_BACK
        ROLE_TRANSPORTER:   [ROLE_TRANSPORTER, ROLE_MOBILE]
        ROLE_CLIENT:        [ROLE_CLIENT, ROLE_MOBILE]
        ROLE_ADMIN:         [ROLE_ADMIN, ROLE_BACK]            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: ssh_common_user_provider

            guard:
                authenticators:
                    - SSH\MyJwtBundle\Security\TokenAuthenticator
            stateless: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/authenticate, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/mobile, roles: ROLE_MOBILE }
        # - { path: ^/back, roles: ROLE_BACK }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
